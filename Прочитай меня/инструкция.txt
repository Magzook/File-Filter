== Подготовка ==
1. Скачайте util.jar и поместите его в удобную папку. Далее будем называть её "текущей папкой";
2. Откройте командную строку, с помощью "cd" перейдите к текущей папке.
   Например: cd "C:\Users\User\Desktop\Приложение"

== Самый простой способ запустить программу ==
1) Поместите файлы с исходными данными в текущую папку. Пусть это будут 2 файла: in1.txt и in2.txt;
2) В командной строке пропишите java -jar util.jar in1.txt in2.txt
3) Нажмите Enter. Файлы с выходными данными появятся в текущей папке.
Далее идёт более продвинутая инструкция.

== Общий синтаксис ==
java -jar util.jar <аргументы>

== Аргументы ==
Путь к файлу с исходными данными. Если таких файлов несколько, разделяйте пути пробелом.
  Примеры:
  in1.txt (относительный путь из текущей папки, т.е. in1.txt лежит в текущей папке)
  data/raw/in2.txt (относительный путь из текущей папки)
  "C:\Users\User\Desktop\Данные\in3.txt" (полный путь);

-o <путь> - указать путь к папке, куда будут помещаться выходные файлы.
  Примеры:
  -o some/path (относительный путь из текущей папки)
  -o "C:\Users\User\Desktop\Приложение" (полный путь)
  Если опция не используется, то в качестве пути выбирается текущая папка.
  При отсутствии на компьютере указанной папки выбирается текущая папка.

-p <префикс> - префикс имён выходных файлов.
  Пример:
  -p result_ (создадутся файлы result_integers.txt, result_floats.txt, result_strings.txt)
  Если опция не используется, то префикс отсутствует.
  Недопустимые символы, которые не могут быть в названии файла, заменяются на знак #.

-a - режим добавления.
  Это значит, что если выходной файл содержит данные, то они не стираются, а запись продолжается ниже.
  Если опция не выбрана, то файл перезаписывается.

-s - режим краткой статистики.
  Консоль выводит информацию о количестве каждого из типов данных (если есть хотя бы 1 представитель).
  Опция используется по умолчанию, и писать её необязательно.

-f - режим полной статистки.
  Консоль помимо количества выводит максимум, минимум, сумму и среднее (для чисел); наименьшую и наибольшую длину (для строк).
  Если опция не выбрана, то используется режим краткой статистики.

Аргументы можно писать в любом порядке. Но важно, что после -p надо сразу указывать префикс, а после -o - путь.
При повторе аргумента учитывается его последнее вхождение. Если после -f идёт -s (а они взаимоисключающие), то -f не учитывается.
При невозможности создать какой-либо файл для выходных данных программа все равно продолжит считать статистику.

== Пример использования ==
in1.txt:
Lorem ipsum dolor sit amet
45
Пример
3.1415
consectetur adipiscing
-0.001
тестовое задание
100500

moreData/in2.txt:
Нормальная форма числа с плавающей запятой
1.528535047E-25
Long
1234567890123456789

cmd:
java -jar util.jar -f -o "C:\Users\User\Desktop\Output" -p res>> -a in1.txt moreData/in2.txt

C:\Users\User\Desktop\Output\res##floats.txt:
1.528535047E-25
3.1415
-0.001

C:\Users\User\Desktop\Output\res##integers.txt:
45
1234567890123456789
100500

C:\Users\User\Desktop\Output\res##strings.txt:
Lorem ipsum dolor sit amet
Нормальная форма числа с плавающей запятой
Пример
Long
consectetur adipiscing
тестовое задание

Вывод консоли: см. фото

== Детали ==
Версия Java: 21;
Версия Maven: 3.6.9.